/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package veterinaria.vista;

import Conexion.Conexion;
import entidades.AreasLaborales;
import entidades.Cargos;
import entidades.Ciudades;
import entidades.Nacionalidad;
import entidades.Personal;
import entidades.TipoContrato;
import entidades.TipoDocumento;
import entidades.TipoSangre;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import veterinaria.negocio.PersonalNegocio;

/**
 *
 * @author felipe
 */
public class jpNuevoPersonal extends javax.swing.JPanel {

    // variables globales para el combobox
    private ComboBoxModel<TipoDocumento> modelCbxTipoDoc = new DefaultComboBoxModel();
    private ComboBoxModel<TipoSangre> modelCbxTipoSangre = new DefaultComboBoxModel();
    private ComboBoxModel<Ciudades> modelCbxCiudadNacimiento = new DefaultComboBoxModel();
    private ComboBoxModel<Nacionalidad> modelCbxNacionalidad = new DefaultComboBoxModel();
    private boolean nuevo;
    private Personal personal = null;
    private Connection conn = null;
    private Statement stmt = null;
    private ResultSet rs = null;

    // constructor para personal nuevo
    public jpNuevoPersonal(boolean nuevo) {
        this.nuevo = nuevo;
        this.personal = new Personal();

        // carga los componentes del Form
        initComponents();

        //llenar combobox
        llenarTipoDoc();
        llenarTipoSangre();
        llenarCiudad();
        llenarNacionalidad();
        llenarTipoContrato();
        llenarAreaLaboral();
        llenarCargo();
        
    }

    // constructor para modificar 
    public jpNuevoPersonal(Personal p) {
        this.personal = p;
        this.nuevo = false;

        // carga los componentes del Form
        initComponents();
        
        if (this.nuevo == false) {
            txtDocumento.setEnabled(nuevo);
        }
        //llenar en combobox
        llenarTipoDoc();
        llenarTipoSangre();
        llenarCiudad();
        llenarNacionalidad();
        llenarTipoContrato();
        llenarAreaLaboral();
        llenarCargo();
        
        txtDocumento.setText(p.getDocumento());
        
        int idTipoDocumento = p.getIdTipoDocumento();
        for (int i = 0; i < cbxTipoDoc.getModel().getSize(); i++) {
            TipoDocumento object = (TipoDocumento) cbxTipoDoc.getModel().getElementAt(i);
            if (object.getId() == idTipoDocumento) {
                cbxTipoDoc.setSelectedItem(object);
            }
        }
        cbxTipoDoc.setEnabled(false);
        
        String idCiudad = p.getIdCiudadNacimiento();
        for (int i = 0; i < cbxCiudadNacimiento.getModel().getSize(); i++) {
            Ciudades object = (Ciudades) cbxCiudadNacimiento.getModel().getElementAt(i);
            if (object.getId().equals(idCiudad)) {
                cbxCiudadNacimiento.setSelectedItem(object);
            }
        }
        
        cbxCiudadNacimiento.setEnabled(false);
        txtNomCompleto.setText(p.getNombre());
        txtNomCompleto.setEnabled(false);
        cbxNacionalidad.setSelectedIndex(p.getIdNacionalidad());
        cbxNacionalidad.setEnabled(false);
        cbxTipoSangre.setSelectedIndex(p.getIdTipoSangre());
        cbxTipoSangre.setEnabled(false);
        dateFechaNacimiento.setDate(p.getFechaNacimiento());
        dateFechaNacimiento.setEnabled(false);
        txtDireccion.setText(p.getDireccion());
        txtTelFijo.setText(p.getTelefonoFijo());
        txtTelMovil.setText(p.getTelefonoCelular());
        txtCorreoElectronico.setText(p.getCorreo());
        cbxTipoContrato.setSelectedIndex(p.getIdtipoContrato());
        cbxArea.setSelectedIndex(p.getIdArea());
        cbxCargo.setSelectedIndex(p.getIdCargo());
        dateFechaContrato.setDate(p.getFechaContrato());
        txtProfesion.setText(p.getProfesion());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtCorreoElectronico = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtTelFijo = new javax.swing.JTextField();
        txtTelMovil = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jblDocumento = new javax.swing.JLabel();
        txtDocumento = new javax.swing.JTextField();
        cbxTipoDoc = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cbxCiudadNacimiento = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtNomCompleto = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbxNacionalidad = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        dateFechaNacimiento = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        cbxTipoSangre = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        cbxArea = new javax.swing.JComboBox<>();
        cbxCargo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cbxTipoContrato = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        dateFechaContrato = new com.toedter.calendar.JDateChooser();
        txtProfesion = new javax.swing.JTextField();
        jblDocumento1 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();

        setPreferredSize(new java.awt.Dimension(1070, 570));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btnCancelar.setBackground(new java.awt.Color(255, 0, 0));
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));
        btnCancelar.setBorderPainted(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnGuardar.setBackground(new java.awt.Color(51, 51, 255));
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setText("Guardar");
        btnGuardar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));
        btnGuardar.setBorderPainted(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setText("Dirección:");

        txtDireccion.setBackground(new java.awt.Color(255, 255, 255));
        txtDireccion.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtDireccion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 255));
        jLabel10.setText("Email:");

        txtCorreoElectronico.setBackground(new java.awt.Color(255, 255, 255));
        txtCorreoElectronico.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtCorreoElectronico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 255));
        jLabel2.setText("Teléfono:");

        txtTelFijo.setBackground(new java.awt.Color(255, 255, 255));
        txtTelFijo.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtTelFijo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));
        txtTelFijo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelFijoKeyTyped(evt);
            }
        });

        txtTelMovil.setBackground(new java.awt.Color(255, 255, 255));
        txtTelMovil.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtTelMovil.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));
        txtTelMovil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelMovilActionPerformed(evt);
            }
        });
        txtTelMovil.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelMovilKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 255));
        jLabel3.setText("Celular:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtTelFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTelMovil, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCorreoElectronico, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTelFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCorreoElectronico, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTelMovil, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jblDocumento.setBackground(new java.awt.Color(51, 51, 255));
        jblDocumento.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jblDocumento.setForeground(new java.awt.Color(51, 51, 255));
        jblDocumento.setText("Documento:");

        txtDocumento.setBackground(new java.awt.Color(255, 255, 255));
        txtDocumento.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtDocumento.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));
        txtDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocumentoActionPerformed(evt);
            }
        });
        txtDocumento.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtDocumentoPropertyChange(evt);
            }
        });
        txtDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDocumentoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDocumentoKeyTyped(evt);
            }
        });

        cbxTipoDoc.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cbxTipoDoc.setForeground(new java.awt.Color(0, 0, 0));
        cbxTipoDoc.setModel(modelCbxTipoDoc);
        cbxTipoDoc.setToolTipText("");
        cbxTipoDoc.setBorder(null);
        cbxTipoDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTipoDocActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 255));
        jLabel6.setText("Ciudad Nacimiento:");

        cbxCiudadNacimiento.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cbxCiudadNacimiento.setForeground(new java.awt.Color(0, 0, 0));
        cbxCiudadNacimiento.setModel(modelCbxCiudadNacimiento);
        cbxCiudadNacimiento.setToolTipText("");
        cbxCiudadNacimiento.setBorder(null);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 255));
        jLabel4.setText("Nombre completo:");

        txtNomCompleto.setBackground(new java.awt.Color(255, 255, 255));
        txtNomCompleto.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtNomCompleto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));
        txtNomCompleto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCompletoActionPerformed(evt);
            }
        });
        txtNomCompleto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNomCompletoKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 255));
        jLabel7.setText("Nacionalidad:");

        cbxNacionalidad.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cbxNacionalidad.setForeground(new java.awt.Color(0, 0, 0));
        cbxNacionalidad.setModel(modelCbxNacionalidad);
        cbxNacionalidad.setToolTipText("");
        cbxNacionalidad.setBorder(null);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 255));
        jLabel5.setText("Fecha Nacimiento:");

        dateFechaNacimiento.setBackground(new java.awt.Color(255, 255, 255));
        dateFechaNacimiento.setForeground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 255));
        jLabel9.setText("Tipo de sangre:");

        cbxTipoSangre.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cbxTipoSangre.setForeground(new java.awt.Color(0, 0, 0));
        cbxTipoSangre.setModel(modelCbxTipoSangre);
        cbxTipoSangre.setToolTipText("");
        cbxTipoSangre.setBorder(null);
        cbxTipoSangre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTipoSangreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(jblDocumento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(txtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(40, 40, 40)
                            .addComponent(cbxTipoDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(txtNomCompleto))
                    .addComponent(dateFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxTipoSangre, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxCiudadNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jblDocumento, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(txtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxTipoDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxCiudadNacimiento))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbxNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtNomCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateFechaNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbxTipoSangre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jLabel8.setText("Datos personales");

        jLabel11.setText("Datos de contacto");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 51, 255));
        jLabel16.setText("Area:");

        cbxArea.setForeground(new java.awt.Color(0, 0, 0));
        cbxArea.setToolTipText("");
        cbxArea.setBorder(null);

        cbxCargo.setForeground(new java.awt.Color(0, 0, 0));
        cbxCargo.setToolTipText("");
        cbxCargo.setBorder(null);

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 51, 255));
        jLabel12.setText("Cargo:");

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 51, 255));
        jLabel14.setText("Tipo de contrato:");

        cbxTipoContrato.setForeground(new java.awt.Color(0, 0, 0));
        cbxTipoContrato.setToolTipText("");
        cbxTipoContrato.setBorder(null);
        cbxTipoContrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTipoContratoActionPerformed(evt);
            }
        });

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 255));
        jLabel13.setText("Fecha de contratación:");

        dateFechaContrato.setBackground(new java.awt.Color(255, 255, 255));
        dateFechaContrato.setForeground(new java.awt.Color(255, 255, 255));

        txtProfesion.setBackground(new java.awt.Color(255, 255, 255));
        txtProfesion.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtProfesion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));
        txtProfesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfesionActionPerformed(evt);
            }
        });
        txtProfesion.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtProfesionPropertyChange(evt);
            }
        });
        txtProfesion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtProfesionKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtProfesionKeyTyped(evt);
            }
        });

        jblDocumento1.setBackground(new java.awt.Color(51, 51, 255));
        jblDocumento1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jblDocumento1.setForeground(new java.awt.Color(51, 51, 255));
        jblDocumento1.setText("Profesion:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jblDocumento1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbxArea, 0, 245, Short.MAX_VALUE)
                    .addComponent(cbxTipoContrato, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtProfesion))
                .addGap(80, 80, 80)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateFechaContrato, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .addComponent(cbxCargo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateFechaContrato, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxTipoContrato, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxArea, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jblDocumento1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(txtProfesion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        jLabel15.setText("Datos de contrato");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGap(2, 2, 2)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1130, 570));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1130, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocumentoActionPerformed

    }//GEN-LAST:event_txtDocumentoActionPerformed

    private void txtDocumentoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtDocumentoPropertyChange

    }//GEN-LAST:event_txtDocumentoPropertyChange

    private void txtDocumentoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocumentoKeyReleased

    }//GEN-LAST:event_txtDocumentoKeyReleased

    private void txtDocumentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocumentoKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Por favor digite sólo números", "Error", JOptionPane.WARNING_MESSAGE);
        }
        String cad = txtDocumento.getText();
        if (cad.equals("0")) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "El documento no puede iniciar en cero", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtDocumentoKeyTyped

    private void cbxTipoDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTipoDocActionPerformed

    }//GEN-LAST:event_cbxTipoDocActionPerformed

    private void txtNomCompletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCompletoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomCompletoActionPerformed

    private void txtNomCompletoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomCompletoKeyTyped
        char c = evt.getKeyChar();
        if (Character.isDigit(c)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Por favor digite sólo letras", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtNomCompletoKeyTyped

    private void cbxTipoSangreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTipoSangreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxTipoSangreActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        
        boolean error = false;
        boolean valFechas;
        SimpleDateFormat formateador = new SimpleDateFormat("dd-MM-yyyy");
        Date fechaActual = new Date();

//####################################################################################################        
        //datos personales
        // documento de identidad
        String p = txtDocumento.getText();
        if (txtDocumento.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "El campo cedula debe estar lleno", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            if (txtDocumento.getText().length() < 8) {
                JOptionPane.showMessageDialog(null, "La cedula no puede tener menos de 6 caracteres", "Error", JOptionPane.WARNING_MESSAGE);
                error = true;
                return;
            } else {
                PersonalNegocio ph = new PersonalNegocio();
                if ((ph.validarPersonal(txtDocumento.getText())) && this.nuevo) {
                    JOptionPane.showMessageDialog(null, "ya existe el empleado", "Error", JOptionPane.WARNING_MESSAGE);
                    error = true;
                    return;
                } else {
                    this.personal.setDocumento(txtDocumento.getText());
                }
            }
        }
        TipoDocumento tipoDocumento = (TipoDocumento) cbxTipoDoc.getSelectedItem();
        // tipo de documento
        if (cbxTipoDoc.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Debe elegir un tipo de documento", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            this.personal.setIdTipoDocumento(tipoDocumento.getId());
        }

        // nombre completo
        if (txtNomCompleto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "El campo nombre debe estar lleno", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            if (txtNomCompleto.getText().length() < 4) {
                JOptionPane.showMessageDialog(null, "El nombre no puede ser menor a 4 caracteres", "Error", JOptionPane.WARNING_MESSAGE);
                error = true;
                return;
            } else {
                personal.setNombre(txtNomCompleto.getText());
            }
        }

        // fecha nacimiento
        if (dateFechaNacimiento.getDate() == null) {
            JOptionPane.showMessageDialog(null, "El campo fecha debe estar lleno", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            formateador = new SimpleDateFormat("dd-MM-yyyy");
            String fecha = formateador.format(dateFechaNacimiento.getDate());
            fechaActual = new Date();
            valFechas = fechaActual.after(dateFechaNacimiento.getDate());
            if (valFechas) {
                personal.setFechaNacimiento(dateFechaNacimiento.getDate());
            } else {
                JOptionPane.showMessageDialog(null, "La fecha debe ser inferior a el dia de hoy", "Error", JOptionPane.WARNING_MESSAGE);
                error = true;
                return;
            }
        }
        
        if (tipoDocumento.getId() == 12) {
            // menorMayor.setUsuarioMenorMayorEdad("Menor");
            Calendar fecha = Calendar.getInstance();
            
            int anoActual = fecha.get(Calendar.YEAR);;
            int anoNacieminto = dateFechaNacimiento.getCalendar().get(Calendar.YEAR);
            int valMayorMenor = anoActual - anoNacieminto;
            
            if (valMayorMenor >= 18) {
                JOptionPane.showMessageDialog(null, "El usuario es mayor de edad, por favor seleccione cedula", "Error", JOptionPane.WARNING_MESSAGE);
                error = true;
                return;
            }
        }
        
        if (tipoDocumento.getId() == 13) {
            //menorMayor.setUsuarioMenorMayorEdad("Adulto");
            Calendar fecha = Calendar.getInstance();
            int anoActual = fecha.get(Calendar.YEAR);;
            int anoNacieminto = dateFechaNacimiento.getCalendar().get(Calendar.YEAR);
            int valMayorMenor = anoActual - anoNacieminto;
            
            if (valMayorMenor < 18) {
                JOptionPane.showMessageDialog(null, "El usuario es menor de edad, por favor seleccione tarjeta de identidad", "Error", JOptionPane.WARNING_MESSAGE);
                error = true;
                return;
            }
            
        }

        // ciudad de nacimiento
        if (cbxCiudadNacimiento.getSelectedItem().toString().equals("0")) {
            JOptionPane.showMessageDialog(null, "Debe elegir una ciudad", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            Ciudades ciudadNacimiento = (Ciudades) cbxCiudadNacimiento.getSelectedItem();
            personal.setIdCiudadNacimiento(ciudadNacimiento.getId());
        }

        // nacionalidad
        Nacionalidad nacionalidad = (Nacionalidad) cbxNacionalidad.getSelectedItem();
        if (cbxNacionalidad.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "debe ingresar la nacionalidad", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            this.personal.setIdNacionalidad(nacionalidad.getId());
        }

        // tipo de sangre
        if (cbxTipoSangre.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Debe elegir un tipo de sangre", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            this.personal.setIdTipoSangre(cbxTipoSangre.getSelectedIndex());
        }

//#####################################################################################################
        //Datos de contacto
        // direccion de residencia
        if (txtDireccion.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe diligenciar la direccion", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            if (txtDireccion.getText().length() < 5) {
                JOptionPane.showMessageDialog(null, "La direccion no puede tener menos de 5 caracteres", "Error", JOptionPane.WARNING_MESSAGE);
                error = true;
                return;
            } else {
                personal.setDireccion(txtDireccion.getText());
            }
        }

        // telefono fijo
        if (txtTelFijo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe ingresar telefono", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            if (txtTelFijo.getText().length() != 7) {
                JOptionPane.showMessageDialog(null, "El numero del telefono debe contener 7 caracteres", "Error", JOptionPane.WARNING_MESSAGE);
                error = true;
                return;
            } else {
                personal.setTelefonoFijo(txtTelFijo.getText());
            }
        }

        //telefono movil
        if (txtTelMovil.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe ingresar un telefono celular", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            if (txtTelMovil.getText().length() != 10) {
                JOptionPane.showMessageDialog(null, "El numero del movil debe contener 10 caracteres", "Error", JOptionPane.WARNING_MESSAGE);
                error = true;
                return;
            } else {
                personal.setTelefonoCelular(txtTelMovil.getText());
            }
        }

        // correo electronico
        if (txtCorreoElectronico.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "debe ingresar correo electronico", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            // Patrón para validar el email
            Pattern pattern = Pattern
                    .compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
                            + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
            // El email a validar
            String email = txtCorreoElectronico.getText();
            Matcher mather = pattern.matcher(email);
            if (mather.find() == true) {
                personal.setCorreo(txtCorreoElectronico.getText());
            } else {
                JOptionPane.showMessageDialog(null, "El email ingresado es inválido.", "Error", JOptionPane.WARNING_MESSAGE);
                error = true;
                return;
            }
        }

//######################################################################################################
        // Datos de contrato
        // tipo de contrato
        if (cbxTipoContrato.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Debe elegir un tipo de contrato", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            this.personal.setIdtipoContrato(cbxTipoContrato.getSelectedIndex());
        }

        // fecha contratacion
        if (dateFechaContrato.getDate() == null) {
            JOptionPane.showMessageDialog(null, "El campo fecha de contratacion debe estar lleno", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            // String fechaFinalizacion = formateador.format(dateFechaContrato.getDate());
//            valFechas = fechaActual.after(dateFechaContrato.getDate());
//            if (valFechas) {
            personal.setFechaContrato(dateFechaContrato.getDate());
//            } else {
//                JOptionPane.showMessageDialog(null, "La fecha debe ser inferior a el dia de hoy", "Error", JOptionPane.WARNING_MESSAGE);
//                error = true;
//                return;
//            }
        }
        // Area
        if (cbxArea.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "El campo area no puede esta vacio", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            personal.setIdArea(cbxArea.getSelectedIndex());
        }

        // Cargo
        if (cbxCargo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "El campo cargo no puede esta vacio", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            personal.setIdCargo(cbxCargo.getSelectedIndex());
        }

        //profesion
        if (txtProfesion.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe ingresar una profesion", "Error", JOptionPane.WARNING_MESSAGE);
            error = true;
            return;
        } else {
            if (txtProfesion.getText().length() < 7) {
                JOptionPane.showMessageDialog(null, "La profesion debe contener minimo 6 caracteres", "Error", JOptionPane.WARNING_MESSAGE);
                error = true;
                return;
            } else {
                personal.setProfesion(txtProfesion.getText());
            }
        }
        
        if (error == false) {
            PersonalNegocio pn = new PersonalNegocio();
            if (nuevo) {
                pn.crearPersonal(personal);
            } else {
                pn.modificarPersonal(personal);
            }
        }

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        
        PersonalNegocio pn = new PersonalNegocio();
        pn.menuPersonal();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtTelFijoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelFijoKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Por favor digite sólo números");
        }
    }//GEN-LAST:event_txtTelFijoKeyTyped

    private void txtTelMovilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelMovilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelMovilActionPerformed

    private void txtTelMovilKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelMovilKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Por favor digite sólo números");
        }
    }//GEN-LAST:event_txtTelMovilKeyTyped

    private void cbxTipoContratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTipoContratoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxTipoContratoActionPerformed

    private void txtProfesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfesionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfesionActionPerformed

    private void txtProfesionPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtProfesionPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfesionPropertyChange

    private void txtProfesionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProfesionKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfesionKeyReleased

    private void txtProfesionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProfesionKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfesionKeyTyped
    
    private void llenarTipoDoc() {
        String SQL_SELECT = "SELECT id,nombre FROM tipodocumento";
        try {
            conn = Conexion.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(SQL_SELECT);
            cbxTipoDoc.removeAllItems();
            cbxTipoDoc.addItem(new TipoDocumento(0, "Tipo de documento"));
            while (rs.next()) {
                cbxTipoDoc.addItem(new TipoDocumento(rs.getInt("id"), rs.getString("nombre")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void llenarNacionalidad() {
        String SQL_SELECT = "SELECT id,nombre FROM nacionalidad";
        try {
            conn = Conexion.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(SQL_SELECT);
            cbxNacionalidad.removeAllItems();
            cbxNacionalidad.addItem(new Nacionalidad(0, "Nacionalidad"));
            while (rs.next()) {
                cbxNacionalidad.addItem(new Nacionalidad(rs.getInt("id"), rs.getString("nombre")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void llenarTipoSangre() {
        String SQL_SELECT = "SELECT id,tipo,rh FROM tiposangre";
        try {
            conn = Conexion.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(SQL_SELECT);
            cbxTipoSangre.removeAllItems();
            cbxTipoSangre.addItem(new TipoSangre(0, "Tipo Sangre", ""));
            while (rs.next()) {
                cbxTipoSangre.addItem(new TipoSangre(rs.getInt("id"), rs.getString("tipo"), rs.getString("rh")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void llenarCiudad() {
        String SQL_SELECT = "SELECT id,nombre FROM ciudades";
        try {
            conn = Conexion.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(SQL_SELECT);
            cbxCiudadNacimiento.removeAllItems();
            cbxCiudadNacimiento.addItem(new Ciudades("0", "Ciudad"));
            while (rs.next()) {
                cbxCiudadNacimiento.addItem(new Ciudades(rs.getString("id"), rs.getString("nombre")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void llenarTipoContrato() {
        String SQL_SELECT = "SELECT id,nombre FROM tipoContrato";
        try {
            conn = Conexion.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(SQL_SELECT);
            cbxTipoContrato.removeAllItems();
            cbxTipoContrato.addItem(new TipoContrato(0, "Tipo de contrato"));
            while (rs.next()) {
                cbxTipoContrato.addItem(new TipoContrato(rs.getInt("id"), rs.getString("nombre")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void llenarAreaLaboral() {
        String SQL_SELECT = "SELECT id,nombre FROM areasLaborales";
        try {
            conn = Conexion.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(SQL_SELECT);
            cbxArea.removeAllItems();
            cbxArea.addItem(new AreasLaborales(0, "Areas laborales"));
            while (rs.next()) {
                cbxArea.addItem(new AreasLaborales(rs.getInt("id"), rs.getString("nombre")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void llenarCargo() {
        String SQL_SELECT = "SELECT id,nombre FROM cargos";
        try {
            conn = Conexion.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(SQL_SELECT);
            cbxCargo.removeAllItems();
            cbxCargo.addItem(new Cargos(0, "Cargos"));
            while (rs.next()) {
                cbxCargo.addItem(new Cargos(rs.getInt("id"), rs.getString("nombre")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<AreasLaborales> cbxArea;
    private javax.swing.JComboBox<Cargos> cbxCargo;
    private javax.swing.JComboBox<Ciudades> cbxCiudadNacimiento;
    private javax.swing.JComboBox<Nacionalidad> cbxNacionalidad;
    private javax.swing.JComboBox<TipoContrato> cbxTipoContrato;
    private javax.swing.JComboBox<TipoDocumento> cbxTipoDoc;
    private javax.swing.JComboBox<TipoSangre> cbxTipoSangre;
    private com.toedter.calendar.JDateChooser dateFechaContrato;
    private com.toedter.calendar.JDateChooser dateFechaNacimiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel jblDocumento;
    private javax.swing.JLabel jblDocumento1;
    private javax.swing.JTextField txtCorreoElectronico;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtDocumento;
    private javax.swing.JTextField txtNomCompleto;
    private javax.swing.JTextField txtProfesion;
    private javax.swing.JTextField txtTelFijo;
    private javax.swing.JTextField txtTelMovil;
    // End of variables declaration//GEN-END:variables
}
